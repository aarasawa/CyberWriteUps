'''
Each new term in the Fibonacci sequence is generated by adding the previous two terms.
By starting with 1 and 2, the first 10 terms will be:
  1,2,3,5,8,13,21,34,55,89
By considering the terms in the Fibonacci sequence whose values do not exceed four million,
find the sum of the even-valued terms.
'''
#use a dict to contain values already calculated
seen = {}

#initial values
seen[1] = 1
seen[2] = 2

#populate list with even values, starting with 2 an initial value
lst = [2]

#fibonacci function takes an index number, calculates the value based on it
def fib(a):

  #negative and zero values return 0
  if a <= 0:
    return 0
  
  #search the dict first to return values to cut-down on search time
  if a in seen:
    return seen[a]
  
  #calculate the fib value
  tot = fib(a - 1) + fib(a - 2)

  #if the value calculated is not in the dict, add it in
  if a not in seen:
    seen[a] = tot

  #add only even values to the list for summation later
  if tot % 2 == 0 and tot not in seen:
    lst.append(tot)

  #filter out values larger than 4 million
  if tot > 4000000:
    return 0
  
  return tot

#driving function
fib(40)
print(seen, '\n', lst)

print(sum(set(lst)))